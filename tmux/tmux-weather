#!/bin/bash

weather_unit="f"
weather_loc=2477637
weather_file="$HOME/.tmux/.noweather"
tmp_file="$HOME/.tmux/tmp"
update_period="600"
degree_symbol="°"



if [ -e $weather_file ]; then
		exit 0
fi


__get_condition_symbol() {

	if [[ $OSTYPE =~ darwin* ]]; then
		# OS X
		local gnugrep="ggrep"
		local date_cmd="gdate"
	elif [[ $OSTYPE =~ linux* ]]; then
	  	# Linux
		local gnugrep="grep"
	 	local date_cmd="date"
	fi

	local condition=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    local sunrise="$2"
    local sunset="$3"
	
	case "$condition" in
		"sunny" | "hot")
			hourmin=$($date_cmd +"%H%M")
			if [ "$hourmin" -ge "$sunset" -o "$hourmin" -le "$sunrise" ]; then
				#echo "☽"
				echo "☾"
			else
				#echo "☀"
				echo "☼"
			fi
			;;
		"rain" | "mixed rain and snow" | "mixed rain and sleet" | "freezing drizzle" | "drizzle" | "light drizzle" | "freezing rain" | "showers" | "mixed rain and hail" | "scattered showers" | "isolated thundershowers" | "thundershowers" | "light rain with thunder" | "light rain" | "rain and snow")
			#echo "☂"
			echo "☔"
			;;
		"snow" | "mixed snow and sleet" | "snow flurries" | "light snow showers" | "blowing snow" | "sleet" | "hail" | "heavy snow" | "scattered snow showers" | "snow showers" | "light snow" | "snow/windy" | "snow grains" | "snow/fog")
			# echo "☃"
			echo "❅"
			;;
		"cloudy" | "mostly cloudy" | "partly cloudy" | "partly cloudy/windy")
			echo "☁ "
			;;
		"tornado" | "tropical storm" | "hurricane" | "severe thunderstorms" | "thunderstorms" | "isolated thunderstorms" | "scattered thunderstorms")
			echo "⚡"
			#echo "☈"
			;;
		"dust" | "foggy" | "fog" | "haze" | "smoky" | "blustery" | "mist")
			#echo "♨"
			#echo "﹌"
			echo "〰"
			;;
		"windy" | "fair/windy")
			#echo "⚐"
			echo "⚑"
			;;
		"clear" | "fair" | "cold")
			hourmin=$($date_cmd +"%H%M")
			if [ "$hourmin" -ge "$sunset" -o "$hourmin" -le "$sunrise" ]; then
				echo "☾"
			else
				echo "〇"
			fi
			;;
		*)
			echo "?"
			;;
	esac
}
	
__read_TMP_FILE() {
	if [ ! -f "$tmp_file" ]; then
		return
	fi
	cat "$tmp_file"
	exit
}

if [ -f $tmp_file ]; then
	if [[ $OSTYPE =~ darwin* ]]; then
		last_update=$(stat -f "%m" ${tmp_file})
		gnugrep="ggrep"
		date_cmd="gdate"
	elif [[ $OSTYPE =~ linux* ]]; then
		last_update=$(stat -c "%Y" ${tmp_file})
		gnugrep="grep"
 		date_cmd="date"
	fi
	
	time_now=$($date_cmd +%s)

	up_to_date=$(echo "(${time_now}-${last_update}) < ${update_period}" | bc)
	if [ "$up_to_date" -eq 1 ]; then
		__read_TMP_FILE
	else

		degree=""

		if [ -z "$degree" ]; then
			weather_data=$(curl --max-time 4 -s "http://weather.yahooapis.com/forecastrss?w=${weather_loc}&u=${weather_unit}")
			if [ "$?" -eq "0" ]; then
				error=$(echo "$weather_data" | grep "problem_cause\|DOCTYPE");
				if [ -n "$error" ]; then
					echo "error"
					exit 1
				fi

				# <yweather:units temperature="F" distance="mi" pressure="in" speed="mph"/>
				unit=$(echo "$weather_data" | "$gnugrep" -PZo "<yweather:units [^<>]*/>" | sed 's/.*temperature="\([^"]*\)".*/\1/')
				condition=$(echo "$weather_data" | "$gnugrep" -PZo "<yweather:condition [^<>]*/>")
				# <yweather:condition  text="Clear"  code="31"  temp="66"  date="Mon, 01 Oct 2012 8:00 pm CST" />
				degree=$(echo "$condition" | sed 's/.*temp="\([^"]*\)".*/\1/')
				condition=$(echo "$condition" | sed 's/.*text="\([^"]*\)".*/\1/')
				# Pull the times for sunrise and sunset so we know when to change the day/night indicator
				# <yweather:astronomy sunrise="6:56 am"   sunset="6:21 pm"/>

				sunrise=$($date_cmd -d"$(echo "$weather_data" | "$gnugrep" "yweather:astronomy" | sed 's/^\(.*\)sunset.*/\1/' | sed 's/^.*sunrise="\(.*m\)".*/\1/')" +%H%M)
				sunset=$($date_cmd -d"$(echo "$weather_data" | "$gnugrep" "yweather:astronomy" | sed 's/^.*sunset="\(.*m\)".*/\1/')" +%H%M)
			fi
			
			case "$weather_unit" in
				"c")
				degree_symbol="°C"
				;;
				"f")
				degree_symbol="°F"
			esac

			
			condition_symbol=$(__get_condition_symbol "$condition" "$sunrise" "$sunset") 
			echo "${condition_symbol}${degree}${degree_symbol}"
			echo "${condition_symbol}${degree}${degree_symbol}" > $tmp_file
		fi
	
	fi
fi


# Get symbol for condition. Available conditions: http://developer.yahoo.com/weather/#codes
